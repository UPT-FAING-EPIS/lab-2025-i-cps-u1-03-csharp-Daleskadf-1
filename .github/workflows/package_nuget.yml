name: Package NuGet and Sonar
env:
  DOTNET_VERSION: '8.0' # la versión de .NET
  SONAR_ORG: 'lab3cali'                    # Nombre de la organización de sonar cloud
  SONAR_PROJECT: 'lab3cali_lab3calidad'        # Key ID del proyecto de sonar
  NUGET_PROJECT: 'Bank.WebApi'
  NUGET_OUTPUT_DIR: './nupkg'
on: push
jobs:
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - uses: snyk/actions/setup@master
    - name: Configurando la versión de NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Install SonarScanner
      run: dotnet tool install -g dotnet-sonarscanner

    - name: Restore dependencies
      run: dotnet restore "Bank/Bank.sln"

    - name: Begin SonarCloud analysis
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin \
          /k:"lab3cali_lab3calidad" \
          /o:"lab3cali" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.sources="Bank/Bank.WebApi, Bank/Bank.WebApi.Tests" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
          /d:sonar.qualitygate.wait=true \
          /d:sonar.exclusions="**/Program.cs,**/code-test-results.html"

    - name: Run tests with coverage
      run: dotnet test "Bank/Bank.sln" --collect:"XPlat Code Coverage;Format=opencover"

    - name: Build solution
      run: dotnet build "Bank/Bank.sln" --no-restore --configuration Release

    - name: Build and Pack
      run: |
        cd Bank/WebApi  # Entra al directorio del proyecto
        ls -R  # Verifica que los archivos existen
        dotnet build Bank.WebApi.csproj --configuration Release
        dotnet pack Bank.WebApi.csproj --configuration Release --output ./nupkg
        ls -R ./nupkg  # Verifica que el paquete .nupkg fue generado

      # Paso 9: Verificar si el directorio nupkg existe
    - name: Check if nupkg directory exists
      run: |
        if [ ! -d "${{ env.NUGET_OUTPUT_DIR }}" ]; then
          echo "El directorio nupkg no existe. Creando..."
          mkdir -p "${{ env.NUGET_OUTPUT_DIR }}"
        fi

    - name: Publish to GitHub Packages
      env:
          GH_NUGET_TOKEN: ${{ secrets.GH_NUGET_TOKEN }}
      run: |
          dotnet nuget push Bank/Bank.WebApi/nupkg/*.nupkg \
            --source "https://nuget.pkg.github.com/Daleskadf/index.json" \
            --api-key "$GH_NUGET_TOKEN" \
            --skip-duplicate